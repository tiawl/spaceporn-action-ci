name: 'CI'
description: 'Clone the user of the dependency, change its build.zig.zon and apply some tests'
inputs:
  repository:
    description: 'Current repository'
    required: true
  sha:
    description: 'Current commit sha'
    required: true
  user:
    description: 'User of the dependency'
    required: true
  token:
    description: 'The github token'
    required: true
  test_build:
    description: 'Do we test `zig build` command ?'
    required: true
  test_update:
    description: 'Do we test `zig build -Dupdate` command ?'
    required: true
  test_fetch:
    description: 'Do we test `zig build -Dfetch` command ?'
    required: true
runs:
  using: "composite"
  steps:
    - uses: tiawl/spaceporn-dep-action-env@v1.0.0

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2.2.0
      with:
        version: ${{ env.zig_version }}

    - name: Install apt packages
      env:
        PACKAGES: "${{ env.apt_packages }}"
      shell: ${{ env.shell }}
      run: |
        sudo apt-get install -y ${PACKAGES}

    - name: Install pip packages
      env:
        PACKAGES: "${{ env.pip_packages }}"
      shell: ${{ env.shell }}
      run: |
        pip3 install ${PACKAGES}

    - name: Set variables
      id: vars
      shell: ${{ env.shell }}
      run: |
        user="$(mktemp -d)"
        hash="$(zig fetch .)"
        printf 'user=%s\n' "${user}" >> "${GITHUB_OUTPUT}"
        printf 'hash=%s\n' "${hash}" >> "${GITHUB_OUTPUT}"

    - name: Clone ${{ inputs.user }}
      env:
        DIR: "${{ steps.vars.outputs.user }}"
        URL: "${{ github.server_url }}/${{ github.repository_owner }}/${{ inputs.user }}"
      shell: ${{ env.shell }}
      run: |
        git clone --recurse-submodules "${URL}.git" "${DIR}"

    - name: Prepare ${{ inputs.user }}/build.zig.zon
      env:
        HASH: "${{ steps.vars.outputs.hash }}"
        SHA: "${{ inputs.sha }}"
        URL: "${{ github.server_url }}/${{ inputs.repository }}/archive"
      working-directory: ${{ steps.vars.outputs.user }}
      shell: ${{ env.shell }}
      run: |
        zon_url="$(grep -o "${URL}/.*\.tar\.gz" build.zig.zon)"
        zon_hash="$(zig fetch "${zon_url}")"
        sed -i "s@${zon_url}@${URL}/${SHA}.tar.gz@;
                s@${zon_hash}@${HASH}@" build.zig.zon

    - name: Test building ${{ inputs.user }}
      if: inputs.test_build == 'true'
      working-directory: ${{ steps.vars.outputs.user }}
      shell: ${{ env.shell }}
      run:
        zig build

    - name: Test updating ${{ inputs.user }}
      if: inputs.test_update == 'true'
      working-directory: ${{ steps.vars.outputs.user }}
      shell: ${{ env.shell }}
      run:
        zig build -Dupdate

    - name: Test fetching ${{ inputs.user }}
      if: inputs.test_fetch == 'true'
      env:
        GH_TOKEN: "${{ inputs.token }}"
      working-directory: ${{ steps.vars.outputs.user }}
      shell: ${{ env.shell }}
      run:
        zig build -Dfetch
