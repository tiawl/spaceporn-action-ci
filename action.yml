name: 'CI'
description: 'Clone the user of the dependency, change its build.zig.zon and apply some tests'
inputs:
  dep:
    description: 'The dependency'
    required: false
    default: ''
  user:
    description: 'User of the dependency'
    required: true
  test_build:
    description: 'Do we test `zig build` command ?'
    required: true
  test_update:
    description: 'Do we test `zig build -Dupdate` command ?'
    required: true
  test_fetch:
    description: 'Do we test `zig build -Dfetch` command ?'
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - uses: tiawl/spaceporn-dep-action-env@v1

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2.2.0
      with:
        version: ${{ env.zig_version }}

    - name: Install apt packages
      shell: ${{ env.shell }}
      run: |
        sudo apt-get install -y ${{ env.apt_packages }}

    - name: Install pip packages
      shell: ${{ env.shell }}
      run: |
        pip3 install ${{ env.pip_packages }}

    - name: Build temporary directories for clone
      id: clone
      shell: ${{ env.shell }}
      run: |
        printf 'user=%s\n' "$(mktemp -d)" >> "${GITHUB_OUTPUT}"
        printf 'dep=%s\n' "$(mktemp -d)" >> "${GITHUB_OUTPUT}"

    - name: Clone and fetch ${{ inputs.dep == '' && || inputs.dep }}
      id: dep
      shell: ${{ env.shell }}
      run: |
        if [[ -n "${{ inputs.dep }}" ]]
        then
          git clone --recurse-submodules "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY_OWNER}/${{ inputs.dep }}.git" "${{ steps.clone.outputs.dep }}"
          printf 'hash=%s\n' "$(zig fetch "${{ steps.clone.outputs.dep }}")" >> "${GITHUB_OUTPUT}"
        else
          printf 'hash=%s\n' "$(zig fetch .)" >> "${GITHUB_OUTPUT}"
        fi

    - name: Clone ${{ inputs.user }}
      shell: ${{ env.shell }}
      run: |
        git clone --recurse-submodules "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY_OWNER}/${{ inputs.user }}.git" "${{ steps.clone.outputs.user }}"

    - name: Prepare ${{ inputs.user }}/build.zig.zon
      working-directory: ${{ steps.clone.outputs.user }}
      shell: ${{ env.shell }}
      run: |
        zon_url="$(grep -o "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/archive/.*\.tar\.gz" build.zig.zon)"
        zon_hash="$(zig fetch "${zon_url}")"
        sed -i "s@${zon_url}@${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz@;
                s@${zon_hash}@${{ steps.dep.outputs.hash }}@" build.zig.zon

    - name: Test building ${{ inputs.user }}
      if: ${{ inputs.test_build == 'true' }}
      working-directory: ${{ steps.clone.outputs.user }}
      shell: ${{ env.shell }}
      run:
        zig build

    - name: Test updating ${{ inputs.user }}
      if: ${{ inputs.test_update == 'true' }}
      working-directory: ${{ steps.clone.outputs.user }}
      shell: ${{ env.shell }}
      run:
        zig build -Dupdate

    - name: Test fetching ${{ inputs.user }}
      if: ${{ inputs.test_fetch == 'true' }}
      working-directory: ${{ steps.clone.outputs.user }}
      shell: ${{ env.shell }}
      run:
        zig build -Dfetch
      env:
        GH_TOKEN: ${{ github.token }}
