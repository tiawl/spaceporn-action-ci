name: 'CI'
description: 'Clone the user of the dependency, change its build.zig.zon and apply some tests'
inputs:
  repository:
    description: 'Current repository'
    required: true
  additional_zig_opts:
    description: 'Additional Zig options'
    required: false
  sha:
    description: 'Current commit sha'
    required: true
  user:
    description: 'User of the dependency'
    required: true
  token:
    description: 'The github token'
    required: true
  test_build:
    description: 'Do we test `zig build` command ?'
    required: true
  test_update:
    description: 'Do we test `zig build -Dupdate` command ?'
    required: true
  test_fetch:
    description: 'Do we test `zig build -Dfetch` command ?'
    required: true
runs:
  using: "composite"
  steps:
    - uses: tiawl/spaceporn-action-env@v1.0.2

    - name: Setup Zig
      uses: mlugg/setup-zig@v1
      with:
        version: ${{ env.zig_version }}

    - name: Install apt packages
      if: runner.os == 'LINUX'
      env:
        PACKAGES: "${{ env.apt_packages }}"
        RUNNER_TMP: "${{ runner.temp }}"
      shell: ${{ env.shell }}
      run: |
        sudo apt-get install -y ${PACKAGES}
        printf 'VENV_ACTIVATE_PATH=%s\n' "${RUNNER_TMP}/venv/bin/activate" >> "${GITHUB_ENV}"

    - name: Translate venv activate to windows path
      if: runner.os == 'WINDOWS'
      env:
        RUNNER_TMP: "${{ runner.temp }}"
      shell: ${{ env.shell }}
      run: |
        wsl --install -d Ubuntu
        printf 'VENV_ACTIVATE_PATH=%s\n' "$(wslpath -a -w "$(wslpath -a -u "${RUNNER_TMP}")/venv/bin/activate")" >> "${GITHUB_ENV}"

    - name: Activate python virtual env & install pip packages
      env:
        PACKAGES: "${{ env.pip_packages }}"
        RUNNER_TMP: "${{ runner.temp }}"
      shell: ${{ env.shell }}
      run: |
        python3 -m venv "${RUNNER_TMP}/venv"
        source "${VENV_ACTIVATE_PATH}"
        printf 'PATH=%s\n' "${PATH}" >> "${GITHUB_ENV}"
        pip install ${PACKAGES}

    - uses: actions/checkout@v4
      with:
        repository: "${{ github.repository_owner }}/${{ inputs.user }}"

    - name: Prepare ${{ inputs.user }}/build.zig.zon
      env:
        SHA: "${{ inputs.sha }}"
        URL: "${{ github.server_url }}/${{ inputs.repository }}/archive"
      shell: ${{ env.shell }}
      run: |
        old_url="$(grep -o "${URL}/.*\.tar\.gz" build.zig.zon)"
        old_hash="$(zig fetch "${old_url}")"
        new_url="${URL}/${SHA}.tar.gz"
        new_hash="$(zig fetch "${new_url}")"
        sed -i "s@${old_url}@${new_url}@;
                s@${old_hash}@${new_hash}@" build.zig.zon

    - name: Test building ${{ inputs.user }}
      if: inputs.test_build == 'true'
      env:
        OPTIONS: "${{ inputs.additional_zig_opts }}"
      shell: ${{ env.shell }}
      run:
        zig build ${OPTIONS}

    - name: Test updating ${{ inputs.user }}
      if: inputs.test_update == 'true'
      env:
        OPTIONS: "${{ inputs.additional_zig_opts }}"
      shell: ${{ env.shell }}
      run:
        zig build -Dupdate ${OPTIONS}

    - name: Test fetching ${{ inputs.user }}
      if: inputs.test_fetch == 'true'
      env:
        OPTIONS: "${{ inputs.additional_zig_opts }}"
      shell: ${{ env.shell }}
      run:
        zig build -Dfetch ${OPTIONS}
